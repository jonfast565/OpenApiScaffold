using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

using namespace ApiClients;

public class ApiClient
{
    const string DefaultBaseAddress = "{{baseAddress}}";

    public string BaseAddress { get; set; }
    public HttpClient Client { get; set; }
    public ILogger Logger { get; set; }

    public ApiClient(string baseAddress, ILogger<ApiClient> logger)
    {
        if (string.IsNullOrEmpty(baseAddress))
        {
            BaseAddress = DefaultBaseAddress;
        }
        else
        {
            BaseAddress = baseAddress;
        }

        Client = new HttpClient();
        Client.BaseAddress = new Uri(BaseAddress);
        Logger = logger;
    }

{{#each paths}}
    public async Task{{#each responses}}< {{#if customType}}{{customType}}{{else}}{{fieldType}}{{/if}}{{#if isArray}}[]{{/if}} >{{/each}} {{pathName}}({{#each allVariables}}{{#if customType}}{{customType}}{{else}}{{fieldType}}{{/if}}{{#if isArray}}[]{{/if}} {{name}}{{#unless @last}},{{/unless}} {{/each}})
    {
        try
        {
            var url = $"{{url}}";
            {{#if queryList}}var paramDict = new Dictionary<string, string> { {{#each queryList}}
                { "{{name}}", {{name}}.ToString() }{{#unless @last}},{{/unless}}{{/each}}
            };
            var formEncodedContent = new FormUrlEncodedContent(paramDict);
            var queryString = await formEncodedContent.ReadAsStringAsync();
            url = $"{url}?{queryString}";
            {{/if}}
            var request = new HttpRequestMessage(HttpMethod.{{operationType}}, url);
            request.Headers.Add("Accept", "application/json");
            {{#if body}}
            var jsonBody = JsonSerializer.Serialize(body);
            request.Content = new StringContent(jsonBody, Encoding.UTF8, "application/json");
            {{/if}}
            var response = await Client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            {{#each responses}}
            var responseContent = await response.Content.ReadAsStreamAsync();
            var result = JsonSerializer.Deserialize<{{#if customType}}{{customType}}{{else}}{{fieldType}}{{/if}}{{#if isArray}}[]{{/if}}>(responseContent);
            return result;
            {{/each}}
        }
        catch (HttpRequestException e)
        {
            throw new Exception("Call to endpoint " +
                                $"{{url}} failed.", e);
        }
    }
{{/each}}
}